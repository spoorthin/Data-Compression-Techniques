<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>Database Implementation Techniques Programming Task SoSe2016: unittest.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Database Implementation Techniques Programming Task SoSe2016
   </div>
   <div id="projectbrief">DB2 Programming Task SoSe2016</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">unittest.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="unittest_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * To change this license header, choose License Headers in Project Properties.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * To change this template file, choose Tools | Templates</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * and open the template in the editor.</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">/* </span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * File:   unittest.hpp</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * Author: ameister</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * Created on 3. Juni 2016, 15:59</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#ifndef UNITTEST_HPP</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#define UNITTEST_HPP</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="global__definitions_8hpp.htm">core/global_definitions.hpp</a>&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="base__column_8hpp.htm">core/base_column.hpp</a>&gt;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="column__base__typed_8hpp.htm">core/column_base_typed.hpp</a>&gt;</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="column_8hpp.htm">core/column.hpp</a>&gt;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="compressed__column_8hpp.htm">core/compressed_column.hpp</a>&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespaceCoGaDB.htm">CoGaDB</a>;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="unittest_8hpp.htm#a2c7300abadf48356033ffb7142e5de14">   27</a></span>&#160;<span class="keyword">const</span> T <a class="code" href="unittest_8hpp.htm#a2c7300abadf48356033ffb7142e5de14">get_rand_value</a>() {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;}</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#pragma GCC diagnostic ignored &quot;-Wignored-qualifiers&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="unittest_8hpp.htm#ac0351c6a5cc228ab9ead7d0448d41b86">   33</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="unittest_8hpp.htm#a2c7300abadf48356033ffb7142e5de14">get_rand_value</a>() {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="keywordflow">return</span> rand() % 100;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;}</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#pragma GCC diagnostic ignored &quot;-Wignored-qualifiers&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="unittest_8hpp.htm#ad815d5fcc27028fccc886886214364b6">   39</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="unittest_8hpp.htm#a2c7300abadf48356033ffb7142e5de14">get_rand_value</a>() {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keywordflow">return</span> float(rand() % 10000) / 100;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;}</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="unittest_8hpp.htm#a27aedf4f266efdddaf9eed7c6e7bddf9">   44</a></span>&#160;<span class="keyword">const</span> std::string <a class="code" href="unittest_8hpp.htm#a2c7300abadf48356033ffb7142e5de14">get_rand_value</a>() {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        std::string characterfield=<span class="stringliteral">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        std::string s;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;10;i++){</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                s.push_back( characterfield[rand() % characterfield.size()]);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">return</span> s;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="unittest_8hpp.htm#a9344a0726e7f04bbae8082a59c688bc2">   55</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="unittest_8hpp.htm#a9344a0726e7f04bbae8082a59c688bc2">fill_column</a>(boost::shared_ptr&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm">ColumnBaseTyped&lt;T&gt;</a> &gt; col, std::vector&lt;T&gt;&amp; reference_data) {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0;i &lt; reference_data.size(); i++){</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                reference_data[i] = get_rand_value&lt;T&gt;();</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; reference_data.size(); i++) {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                col-&gt;insert(reference_data[i]);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Size in Bytes: &quot;</span> &lt;&lt; col-&gt;getSizeinBytes() &lt;&lt; std::endl;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="unittest_8hpp.htm#a8ac0f6c1158442562aac6b36770b008c">   67</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="unittest_8hpp.htm#a8ac0f6c1158442562aac6b36770b008c">equals</a>(std::vector&lt;T&gt; reference_data, boost::shared_ptr&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm">ColumnBaseTyped&lt;T&gt;</a> &gt; col) {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; reference_data.size(); i++) {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                T col_value = (*col)[i];</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                <span class="keywordflow">if</span> (reference_data[i] != col_value) {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                        std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error! In Unittest: read invalid data&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                        std::cout &lt;&lt; <span class="stringliteral">&quot;Column: &#39;&quot;</span> &lt;&lt; col-&gt;getName() </div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                                &lt;&lt; <span class="stringliteral">&quot;&#39; TID: &#39;&quot;</span>&lt;&lt; i </div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                &lt;&lt; <span class="stringliteral">&quot;&#39; Expected Value: &#39;&quot;</span> &lt;&lt; reference_data[i] </div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                &lt;&lt; <span class="stringliteral">&quot;&#39; Actual Value: &#39;&quot;</span> &lt;&lt; col_value &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> </div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                &lt;&lt; std::endl;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="unittest_8hpp.htm#af940b186409ca06ca31020d77f89ac80">   84</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="unittest_8hpp.htm#af940b186409ca06ca31020d77f89ac80">test_column</a>(boost::shared_ptr&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm">ColumnBaseTyped&lt;T&gt;</a> &gt; col, boost::shared_ptr&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm">ColumnBaseTyped&lt;T&gt;</a> &gt; col_new, std::vector&lt;T&gt;&amp; reference_data) {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="comment">/****** BASIC INSERT TEST ******/</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;BASIC INSERT TEST: Filling column with data...&quot;</span>; <span class="comment">// &lt;&lt; std::endl; </span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="comment">//col-&gt;insert(reference_data.begin(),reference_data.end()); </span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        </div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">if</span> (reference_data.size() != col-&gt;size()) { </div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error! In Unittest: invalid data size&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="unittest_8hpp.htm#a8ac0f6c1158442562aac6b36770b008c">equals</a>(reference_data, col)) {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                std::cerr &lt;&lt; <span class="stringliteral">&quot;BASIC INSERT TEST FAILED!&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        std::cout &lt;&lt; std::endl;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;SUCCESS&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="comment">/****** VIRTUAL COPY CONSTRUCTOR TEST ******/</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;VIRTUAL COPY CONSTRUCTOR TEST...&quot;</span>;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="comment">//boost::shared_ptr&lt;DictionaryCompressedColumn&lt;int&gt; &gt; compressed_col (new DictionaryCompressedColumn&lt;int&gt;(&quot;compressed int column&quot;,INT));</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="comment">//compressed_col-&gt;insert(reference_data.begin(),reference_data.end()); </span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <a class="code" href="namespaceCoGaDB.htm#a3d7ce6ae5ca4381f2b4f1db23f982c5d">ColumnPtr</a> copy = col-&gt;copy();</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">if</span>(!copy) { </div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                std::cerr &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot;VIRTUAL COPY CONSTRUCTOR TEST FAILED!&quot;</span> &lt;&lt; std::endl; </div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        }       </div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordtype">bool</span> result = *(boost::static_pointer_cast&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm">ColumnBaseTyped&lt;T&gt;</a> &gt;(copy)) == *(boost::static_pointer_cast&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm">ColumnBaseTyped&lt;T&gt;</a> &gt;(col));</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordflow">if</span> (!result) { </div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                std::cerr &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot;VIRTUAL COPY CONSTRUCTOR TEST FAILED!&quot;</span> &lt;&lt; std::endl; </div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        }       </div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;SUCCESS&quot;</span>&lt;&lt; std::endl;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="comment">/****** UPDATE TEST ******/</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid = rand() % 100;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        T new_value = get_rand_value&lt;T&gt;();</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;UPDATE TEST: Update value on Position &#39;&quot;</span> &lt;&lt; tid &lt;&lt; <span class="stringliteral">&quot;&#39; to new value &#39;&quot;</span> &lt;&lt; new_value &lt;&lt; <span class="stringliteral">&quot;&#39;...&quot;</span>; <span class="comment">// &lt;&lt; std::endl;</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        reference_data[tid] = new_value;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        col-&gt;update(tid, new_value);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="unittest_8hpp.htm#a8ac0f6c1158442562aac6b36770b008c">equals</a>(reference_data, col)) {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                std::cerr &lt;&lt; <span class="stringliteral">&quot;UPDATE TEST FAILED!&quot;</span> &lt;&lt; std::endl;        </div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;SUCCESS&quot;</span>&lt;&lt; std::endl;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="comment">/****** DELETE TEST ******/</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid = rand() % 100;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                std::cout &lt;&lt; <span class="stringliteral">&quot;DELETE TEST: Delete value on Position &#39;&quot;</span> &lt;&lt; tid &lt;&lt; <span class="stringliteral">&quot;&#39;...&quot;</span>; <span class="comment">// &lt;&lt; std::endl;</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                reference_data.erase(reference_data.begin()+tid);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                col-&gt;remove(tid);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                <span class="keywordflow">if</span> (!<a class="code" href="unittest_8hpp.htm#a8ac0f6c1158442562aac6b36770b008c">equals</a>(reference_data, col)) {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                        std::cerr &lt;&lt; <span class="stringliteral">&quot;DELETE TEST FAILED!&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                std::cout &lt;&lt; <span class="stringliteral">&quot;SUCCESS&quot;</span>&lt;&lt; std::endl;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="comment">/****** STORE AND LOAD TEST ******/</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                std::cout &lt;&lt; <span class="stringliteral">&quot;STORE AND LOAD TEST: store column data on disc and load it...&quot;</span>; <span class="comment">// &lt;&lt; std::endl;</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                col-&gt;store(<span class="stringliteral">&quot;data/&quot;</span>);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                col-&gt;clearContent();</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                <span class="keywordflow">if</span>(col-&gt;size() != 0) {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                        std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error! &#39;col-&gt;size()&#39; returned non zero after call to &#39;col-&gt;clearContent()&#39;\nTEST FAILED&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                }</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="comment">//boost::shared_ptr&lt;Column&lt;int&gt; &gt; col2 (new Column&lt;int&gt;(&quot;int column&quot;,INT));</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                col_new-&gt;load(<span class="stringliteral">&quot;data/&quot;</span>);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <span class="keywordflow">if</span> (!<a class="code" href="unittest_8hpp.htm#a8ac0f6c1158442562aac6b36770b008c">equals</a>(reference_data, col_new)) {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                        std::cerr &lt;&lt; <span class="stringliteral">&quot;STORE AND LOAD TEST FAILED!&quot;</span> &lt;&lt; std::endl;        </div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                std::cout &lt;&lt; <span class="stringliteral">&quot;SUCCESS&quot;</span>&lt;&lt; std::endl;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> ValueType&gt;</div><div class="line"><a name="l00174"></a><span class="lineno"><a class="line" href="unittest_8hpp.htm#a95d9c62e7769a11ad17fabc247e7e338">  174</a></span>&#160;<a class="code" href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5">AttributeType</a> <a class="code" href="unittest_8hpp.htm#a95d9c62e7769a11ad17fabc247e7e338">getAttributeType</a>(){</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5af2a0adc19f7cdd52368e82a26e8c1e48">INT</a>;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;}</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keyword">template</span>&lt; &gt;</div><div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="unittest_8hpp.htm#aa4b7b1ad8ac6ad9bedaa1efff749e720">  179</a></span>&#160;<a class="code" href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5">AttributeType</a> <a class="code" href="unittest_8hpp.htm#aa4b7b1ad8ac6ad9bedaa1efff749e720">getAttributeType&lt;int&gt;</a>(){</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5af2a0adc19f7cdd52368e82a26e8c1e48">INT</a>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;}</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="keyword">template</span>&lt; &gt;</div><div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="unittest_8hpp.htm#abcf4a73f35a838f28a3c1af183ba9a0d">  183</a></span>&#160;<a class="code" href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5">AttributeType</a> <a class="code" href="unittest_8hpp.htm#abcf4a73f35a838f28a3c1af183ba9a0d">getAttributeType&lt;float&gt;</a>(){</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5a9fdb653463f9452e019074a0eeacf3b9">FLOAT</a>;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;}</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="keyword">template</span>&lt; &gt;</div><div class="line"><a name="l00188"></a><span class="lineno"><a class="line" href="unittest_8hpp.htm#a36e187b9c794aaeccf750691b4d7da66">  188</a></span>&#160;<a class="code" href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5">AttributeType</a> getAttributeType&lt;std::string&gt;(){</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5aa69b8f96a2564281efcf85c3e3d2d65f">VARCHAR</a>;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;}</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> ValueType&gt;</div><div class="line"><a name="l00193"></a><span class="lineno"><a class="line" href="unittest_8hpp.htm#acb4dd4c139d8e136dcec2c18be138e94">  193</a></span>&#160;std::string <a class="code" href="unittest_8hpp.htm#acb4dd4c139d8e136dcec2c18be138e94">getAttributeString</a>(){</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&quot;unknown column&quot;</span>;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;}</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00198"></a><span class="lineno"><a class="line" href="unittest_8hpp.htm#a269eaa827f9c0521e8507def8f4e5d2c">  198</a></span>&#160;std::string <a class="code" href="unittest_8hpp.htm#a269eaa827f9c0521e8507def8f4e5d2c">getAttributeString&lt;int&gt;</a>(){</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&quot;int column&quot;</span>;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;}</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="unittest_8hpp.htm#ab84ced225c81463470953ed751b31e3f">  202</a></span>&#160;std::string  <a class="code" href="unittest_8hpp.htm#ab84ced225c81463470953ed751b31e3f">getAttributeString&lt;float&gt;</a>(){</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&quot;float column&quot;</span>;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;}</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="unittest_8hpp.htm#a692b666803b49dea1a2ac810cf497dd8">  207</a></span>&#160;std::string  getAttributeString&lt;std::string&gt;(){</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&quot;string column&quot;</span>;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;}</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">template</span>&lt;<span class="keyword">typename</span>&gt; <span class="keyword">class </span>ColumnType, <span class="keyword">typename</span> ValueType&gt;</div><div class="line"><a name="l00212"></a><span class="lineno"><a class="line" href="unittest_8hpp.htm#aaaeb93e760618e60dbee3fdfbdc76967">  212</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="unittest_8hpp.htm#aaaeb93e760618e60dbee3fdfbdc76967">unittest</a>() {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;RUN Unittest for Column with BaseType ColumnBaseTyped&lt;int&gt; &gt;&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        </div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;         boost::shared_ptr&lt;ColumnType&lt;ValueType&gt; &gt; col_one (<span class="keyword">new</span> ColumnType&lt;ValueType&gt;(getAttributeString&lt;ValueType&gt;(),getAttributeType&lt;ValueType&gt;()));</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;         boost::shared_ptr&lt;ColumnType&lt;ValueType&gt; &gt; col_two (<span class="keyword">new</span> ColumnType&lt;ValueType&gt;(getAttributeString&lt;ValueType&gt;(),getAttributeType&lt;ValueType&gt;()));</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        </div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        std::vector&lt;ValueType&gt; reference_data(100);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        fill_column&lt;ValueType&gt;(col_one, reference_data);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordflow">return</span> test_column&lt;ValueType&gt;(col_one, col_two, reference_data);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;}</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* UNITTEST_HPP */</span><span class="preprocessor"></span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="ttc" id="unittest_8hpp_htm_a8ac0f6c1158442562aac6b36770b008c"><div class="ttname"><a href="unittest_8hpp.htm#a8ac0f6c1158442562aac6b36770b008c">equals</a></div><div class="ttdeci">bool equals(std::vector&lt; T &gt; reference_data, boost::shared_ptr&lt; ColumnBaseTyped&lt; T &gt; &gt; col)</div><div class="ttdef"><b>Definition:</b> <a href="unittest_8hpp_source.htm#l00067">unittest.hpp:67</a></div></div>
<div class="ttc" id="column__base__typed_8hpp_htm"><div class="ttname"><a href="column__base__typed_8hpp.htm">column_base_typed.hpp</a></div></div>
<div class="ttc" id="unittest_8hpp_htm_abcf4a73f35a838f28a3c1af183ba9a0d"><div class="ttname"><a href="unittest_8hpp.htm#abcf4a73f35a838f28a3c1af183ba9a0d">getAttributeType&lt; float &gt;</a></div><div class="ttdeci">AttributeType getAttributeType&lt; float &gt;()</div><div class="ttdef"><b>Definition:</b> <a href="unittest_8hpp_source.htm#l00183">unittest.hpp:183</a></div></div>
<div class="ttc" id="unittest_8hpp_htm_a269eaa827f9c0521e8507def8f4e5d2c"><div class="ttname"><a href="unittest_8hpp.htm#a269eaa827f9c0521e8507def8f4e5d2c">getAttributeString&lt; int &gt;</a></div><div class="ttdeci">std::string getAttributeString&lt; int &gt;()</div><div class="ttdef"><b>Definition:</b> <a href="unittest_8hpp_source.htm#l00198">unittest.hpp:198</a></div></div>
<div class="ttc" id="base__column_8hpp_htm"><div class="ttname"><a href="base__column_8hpp.htm">base_column.hpp</a></div></div>
<div class="ttc" id="namespaceCoGaDB_htm_ac53a708d27568a6584e7c03b4ab659e5aa69b8f96a2564281efcf85c3e3d2d65f"><div class="ttname"><a href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5aa69b8f96a2564281efcf85c3e3d2d65f">CoGaDB::VARCHAR</a></div><div class="ttdef"><b>Definition:</b> <a href="global__definitions_8hpp_source.htm#l00016">global_definitions.hpp:16</a></div></div>
<div class="ttc" id="namespaceCoGaDB_htm_ac53a708d27568a6584e7c03b4ab659e5"><div class="ttname"><a href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5">CoGaDB::AttributeType</a></div><div class="ttdeci">AttributeType</div><div class="ttdef"><b>Definition:</b> <a href="global__definitions_8hpp_source.htm#l00016">global_definitions.hpp:16</a></div></div>
<div class="ttc" id="unittest_8hpp_htm_ab84ced225c81463470953ed751b31e3f"><div class="ttname"><a href="unittest_8hpp.htm#ab84ced225c81463470953ed751b31e3f">getAttributeString&lt; float &gt;</a></div><div class="ttdeci">std::string getAttributeString&lt; float &gt;()</div><div class="ttdef"><b>Definition:</b> <a href="unittest_8hpp_source.htm#l00202">unittest.hpp:202</a></div></div>
<div class="ttc" id="namespaceCoGaDB_htm"><div class="ttname"><a href="namespaceCoGaDB.htm">CoGaDB</a></div><div class="ttdoc">The global namespace of the programming tasks, to avoid name claches with other libraries. </div><div class="ttdef"><b>Definition:</b> <a href="base__column_8cpp_source.htm#l00008">base_column.cpp:8</a></div></div>
<div class="ttc" id="namespaceCoGaDB_htm_ac53a708d27568a6584e7c03b4ab659e5af2a0adc19f7cdd52368e82a26e8c1e48"><div class="ttname"><a href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5af2a0adc19f7cdd52368e82a26e8c1e48">CoGaDB::INT</a></div><div class="ttdef"><b>Definition:</b> <a href="global__definitions_8hpp_source.htm#l00016">global_definitions.hpp:16</a></div></div>
<div class="ttc" id="unittest_8hpp_htm_aa4b7b1ad8ac6ad9bedaa1efff749e720"><div class="ttname"><a href="unittest_8hpp.htm#aa4b7b1ad8ac6ad9bedaa1efff749e720">getAttributeType&lt; int &gt;</a></div><div class="ttdeci">AttributeType getAttributeType&lt; int &gt;()</div><div class="ttdef"><b>Definition:</b> <a href="unittest_8hpp_source.htm#l00179">unittest.hpp:179</a></div></div>
<div class="ttc" id="namespaceCoGaDB_htm_ac53a708d27568a6584e7c03b4ab659e5a9fdb653463f9452e019074a0eeacf3b9"><div class="ttname"><a href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5a9fdb653463f9452e019074a0eeacf3b9">CoGaDB::FLOAT</a></div><div class="ttdef"><b>Definition:</b> <a href="global__definitions_8hpp_source.htm#l00016">global_definitions.hpp:16</a></div></div>
<div class="ttc" id="namespaceCoGaDB_htm_a3d7ce6ae5ca4381f2b4f1db23f982c5d"><div class="ttname"><a href="namespaceCoGaDB.htm#a3d7ce6ae5ca4381f2b4f1db23f982c5d">CoGaDB::ColumnPtr</a></div><div class="ttdeci">ColumnBase::ColumnPtr ColumnPtr</div><div class="ttdoc">makes a smart pointer to a ColumnBase Object visible in the namespace </div><div class="ttdef"><b>Definition:</b> <a href="base__column_8hpp_source.htm#l00155">base_column.hpp:155</a></div></div>
<div class="ttc" id="namespaceCoGaDB_htm_a87401571c18eb717e2135969e67a0cf2"><div class="ttname"><a href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">CoGaDB::TID</a></div><div class="ttdeci">unsigned int TID</div><div class="ttdef"><b>Definition:</b> <a href="global__definitions_8hpp_source.htm#l00046">global_definitions.hpp:46</a></div></div>
<div class="ttc" id="classCoGaDB_1_1ColumnBaseTyped_htm"><div class="ttname"><a href="classCoGaDB_1_1ColumnBaseTyped.htm">CoGaDB::ColumnBaseTyped</a></div><div class="ttdoc">This class represents a column with type T, is the base class for all typed column classes and allows...</div><div class="ttdef"><b>Definition:</b> <a href="column__base__typed_8hpp_source.htm#l00033">column_base_typed.hpp:33</a></div></div>
<div class="ttc" id="global__definitions_8hpp_htm"><div class="ttname"><a href="global__definitions_8hpp.htm">global_definitions.hpp</a></div></div>
<div class="ttc" id="column_8hpp_htm"><div class="ttname"><a href="column_8hpp.htm">column.hpp</a></div></div>
<div class="ttc" id="unittest_8hpp_htm_a95d9c62e7769a11ad17fabc247e7e338"><div class="ttname"><a href="unittest_8hpp.htm#a95d9c62e7769a11ad17fabc247e7e338">getAttributeType</a></div><div class="ttdeci">AttributeType getAttributeType()</div><div class="ttdef"><b>Definition:</b> <a href="unittest_8hpp_source.htm#l00174">unittest.hpp:174</a></div></div>
<div class="ttc" id="compressed__column_8hpp_htm"><div class="ttname"><a href="compressed__column_8hpp.htm">compressed_column.hpp</a></div></div>
<div class="ttc" id="unittest_8hpp_htm_af940b186409ca06ca31020d77f89ac80"><div class="ttname"><a href="unittest_8hpp.htm#af940b186409ca06ca31020d77f89ac80">test_column</a></div><div class="ttdeci">bool test_column(boost::shared_ptr&lt; ColumnBaseTyped&lt; T &gt; &gt; col, boost::shared_ptr&lt; ColumnBaseTyped&lt; T &gt; &gt; col_new, std::vector&lt; T &gt; &amp;reference_data)</div><div class="ttdef"><b>Definition:</b> <a href="unittest_8hpp_source.htm#l00084">unittest.hpp:84</a></div></div>
<div class="ttc" id="unittest_8hpp_htm_a2c7300abadf48356033ffb7142e5de14"><div class="ttname"><a href="unittest_8hpp.htm#a2c7300abadf48356033ffb7142e5de14">get_rand_value</a></div><div class="ttdeci">const T get_rand_value()</div><div class="ttdef"><b>Definition:</b> <a href="unittest_8hpp_source.htm#l00027">unittest.hpp:27</a></div></div>
<div class="ttc" id="unittest_8hpp_htm_a9344a0726e7f04bbae8082a59c688bc2"><div class="ttname"><a href="unittest_8hpp.htm#a9344a0726e7f04bbae8082a59c688bc2">fill_column</a></div><div class="ttdeci">void fill_column(boost::shared_ptr&lt; ColumnBaseTyped&lt; T &gt; &gt; col, std::vector&lt; T &gt; &amp;reference_data)</div><div class="ttdef"><b>Definition:</b> <a href="unittest_8hpp_source.htm#l00055">unittest.hpp:55</a></div></div>
<div class="ttc" id="unittest_8hpp_htm_acb4dd4c139d8e136dcec2c18be138e94"><div class="ttname"><a href="unittest_8hpp.htm#acb4dd4c139d8e136dcec2c18be138e94">getAttributeString</a></div><div class="ttdeci">std::string getAttributeString()</div><div class="ttdef"><b>Definition:</b> <a href="unittest_8hpp_source.htm#l00193">unittest.hpp:193</a></div></div>
<div class="ttc" id="unittest_8hpp_htm_aaaeb93e760618e60dbee3fdfbdc76967"><div class="ttname"><a href="unittest_8hpp.htm#aaaeb93e760618e60dbee3fdfbdc76967">unittest</a></div><div class="ttdeci">bool unittest()</div><div class="ttdef"><b>Definition:</b> <a href="unittest_8hpp_source.htm#l00212">unittest.hpp:212</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Sat Apr 1 2017 14:11:30 for Database Implementation Techniques Programming Task SoSe2016 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
